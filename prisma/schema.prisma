// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  email                String                     @unique
  name                 String
  photo                String?
  workspacesCreated    Workspace[]
  workspacesAssociated WorkspaceUserAssociation[]
}

enum WorkspaceType {
  PERSONAL
  ORGANIZATION
}

model Workspace {
  id              String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  createdBy       User                       @relation(fields: [createdByUserId], references: [id])
  createdByUserId String                     @db.ObjectId
  type            WorkspaceType              @default(PERSONAL)
  name            String
  slug            String                     @unique
  usersAssociated WorkspaceUserAssociation[]
  domain          String? // if type is ORGANIZATION, then it would be the domain name of the organisation
}

model WorkspaceUserAssociation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId

  @@unique([workspaceId, userId])
}
